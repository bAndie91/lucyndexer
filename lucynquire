#!/usr/bin/env perl

use lib './lib';
use Lucy::Search::IndexSearcher;
use Data::Dumper;
use LucyX::Suggester;
use Encode qw/decode_utf8 encode_utf8/;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';


sub dump_query;

sub dump_query
{
	my $q = shift;
	my @children;
	my %prefix = (
		'Lucy::Search::NOTQuery' => 'NOT ',
	);
	my %glue = (
		'Lucy::Search::ORQuery' => ' OR ',
		'Lucy::Search::ANDQuery' => ' AND ',
	);
	
	for my $sq (@{$q->{children}})
	{
		push @children, dump_query $sq;
	}
	if(@children) {
		my $children;
		if(@children == 1) {
			$children = $children[0];
		}else{
			$children = sprintf "(%s)", join $glue{$q->{_class}}, @children;
		}
		return sprintf "%s%s", $prefix{$q->{_class}}, $children;
	}
	else {
		my $term;
		if(exists $q->{terms}) {
			$term = join "*", @{$q->{terms}};
		}else{
			$term = $q->{term};
		}
		return sprintf "%s:%s", $q->{field}, $term;
	}
}


my $index_path = $ARGV[0] || die;
shift @ARGV;
@ARGV or die "Usage: $0 <index-path> [search-terms...]\n";
my $search_query = decode_utf8 join " ", @ARGV;


my $index = Lucy::Search::IndexSearcher->new(index => $index_path);

#my $sort_spec = Lucy::Search::SortSpec->new(
#	rules => [
#		Lucy::Search::SortRule->new( field => 'date' ),
#		Lucy::Search::SortRule->new( type  => 'doc_id' ),
#	],
#);

my $query_parser = Lucy::Search::QueryParser->new(
	schema         => $index->get_schema,
	default_boolop => 'AND',
);
$query_parser->set_heed_colons(1);

$search_query =~ s/,/ OR /g;
my $query = $query_parser->parse($search_query);
my $parsed_query_string = dump_query $query->dump;
#warn Dumper $query->dump, $parsed_query_string;

my $hits = $index->hits(
	query      => $query,
	offset     => 0,
	num_wanted => 25,
	#sort_spec  => $sort_spec,
);

my $suggester = LucyX::Suggester->new( indexes => [ $index_path ] );
my $suggestions = $suggester->suggest($search_query);

printf "query %s\n", $parsed_query_string;
printf "total %s\n", $hits->total_hits;
printf "suggestion %s\n", encode_utf8($_) for @$suggestions;
print "\n";

while( my $hit = $hits->next )
{
	printf "score %.2f\n", $hit->get_score;
	for my $attribute (sort keys %$hit)
	{
		printf "%s %s\n", $attribute, $_ for split /\n/, $hit->{$attribute};
	}
	print "\n";
}



#use Lucy::Highlight::Highlighter;
#
#my $searcher = Lucy::Search::IndexSearcher->new( 
#    index => $index_path,
#);
#my $hits = $searcher->hits(query => $search_query, offset => 0, num_wanted=> 10,);
#my $highlighter = Lucy::Highlight::Highlighter->new(
#	searcher => $searcher,
#	query    => $search_query,
#	field    => 'content',
#	excerpt_length => 200,
#);
#while ( my $hit = $hits->next ) {
#    my $excerpt = $highlighter->create_excerpt($hit);
#    print Dumper $hit;
#    print $excerpt;
#}
