#!/usr/bin/env perl

use Lucy::Index::Indexer;
use Lucy::Plan::Schema;
use Lucy::Plan::FullTextType;
use Lucy::Analysis::EasyAnalyzer;
use Data::Dumper;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';


my $lang = $ENV{'LUCYNDEX_LANG'};
my $index_path = $ARGV[0] || die "Usage: LUCYNDEX_LANG=<lc> $0 <index-path>\n";

my $schema = Lucy::Plan::Schema->new;
my $tokenizer = Lucy::Analysis::RegexTokenizer->new( pattern => '\w+' );
my $stopfilter = Lucy::Analysis::SnowballStopFilter->new( language => $lang );
my $stemmer = Lucy::Analysis::SnowballStemmer->new( language => $lang );
my $normalizer = Lucy::Analysis::Normalizer->new( normalization_form => 'NFKC', case_fold => 1, strip_accents => 1 );
my $analyzer = Lucy::Analysis::PolyAnalyzer->new(analyzers => [ $tokenizer, $stopfilter, $stemmer, $normalizer, ]);

my $type_location = Lucy::Plan::StringType->new(
	indexed => 0,
	stored => 1,
	sortable => 0,
);
my $type_attribute = Lucy::Plan::FullTextType->new(
	analyzer => $analyzer,
	indexed => 1,
	stored => 1,
	sortable => 0,
);
my $type_content = Lucy::Plan::FullTextType->new(
	analyzer => $analyzer,
	indexed => 1,
	stored => 0,
	highlightable => 1,
	sortable => 0,
);

$schema->spec_field( name => 'location', type => $type_location );
$schema->spec_field( name => 'title', type => $type_attribute );
$schema->spec_field( name => 'content', type => $type_content );


my $indexer;
eval {
	$indexer = Lucy::Index::Indexer->new(
		index => $index_path,
	);
	$schema = $indexer->get_schema;
} or $indexer = Lucy::Index::Indexer->new(
	index  => $index_path,
	schema => $schema,
	create => 1,
);


my $key_schema = Lucy::Plan::Schema->new;
$key_schema->spec_field( name => 'location', type => Lucy::Plan::StringType->new( indexed => 1, stored => 1, ), );
my $key_index_path = "$index_path/keys_index";
sub new_key_indexer { Lucy::Index::Indexer->new( index => $key_index_path, schema => $key_schema, create => 1, ); }
my $key_indexer = new_key_indexer();
sub new_key_searcher { return Lucy::Search::IndexSearcher->new(index => $key_index_path); }
my $key_searcher; if(not eval { $key_searcher = new_key_searcher(); 1; })
{ $key_indexer->commit; $key_indexer = new_key_indexer(); $key_searcher = new_key_searcher(); }
my $key_query_parser = Lucy::Search::QueryParser->new(schema => $key_indexer->get_schema);

sub key_exists
{
	my $key = shift;
	my $query = $key_query_parser->parse("\"$key\"");
	my $hits = $key_searcher->hits(query => $query, offset => 0, num_wanted => 1);
	return $hits->total_hits;
}



my %document;
my $n_docs = 0;
my $n_dups = 0;
my $time0 = time;

while(<STDIN>)
{
	my ($datatype) = /^(\S+) ?/;
	next if not $datatype;
   	my $data = $';
   	chomp $data;
	
	if($datatype eq 'end')
	{
		if(key_exists($document{'location'}))
		{
			$n_dups++;
		}
		else {
			$indexer->add_doc(doc => \%document);
			$key_indexer->add_doc(doc => {'location' => $document{'location'},});
			$n_docs++;
		}
	    %document = ();
    }
    else
    {
		if(not grep {$datatype eq $_} @{$schema->all_fields})
		{
			warn "adding field '$datatype'\n";
			$schema->spec_field( name => $datatype, type => $type_attribute );
		}
		$document{$datatype} .= "\n" if exists $document{$datatype};
		$document{$datatype} .= $data;
	}
	
	my $time = time;
	if($time - $time0 > 1)
	{
		warn "processed $n_docs documents, $n_dups duplicates...\n";
		$time0 = $time;
	}
}
$indexer->commit;
$indexer->optimize;
$key_indexer->commit;
$key_indexer->optimize;

warn "indexed $n_docs documents ($n_dups duplicates skipped).\n";
