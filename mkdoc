#!/usr/bin/env perl

use Data::Dumper;
use Email::MIME;
use Encode qw/decode_utf8 encode_utf8/;
use HTML::Entities;
use IPC::Open2;
#use Archive::Zip;

@title_headers = ('Subject');
@sender_headers = ('From', 'Sender', 'X-Sender', 'Return-Path', 'Reply-To');
@recipient_headers = ('To', 'Cc', 'Delivered-To');
@non_textual_types = (qr{^(image|video|audio)/}, qr{^application/(x-)?(pgp|pkcs7)-signature$}, qr{^application/octet-?stream$});


sub uniq
{
	return keys { map {$_=>undef} @_ };
}


sub harvest_data;

sub harvest_data
{
	my $filepath = shift;
	my $mime_part = shift;
	my $attr_ref = shift;
	
	
	for my $attr ('title', 'sender', 'recipient')
	{
		my @header_names = @{$attr."_headers"};
		push @{$attr_ref->{$attr}},
			uniq
			grep {$_}
			map {encode_utf8($_)}
			map {join "\n", $mime_part->header($_)}
			@header_names;
	}
	
	
	my ($mime_type) = $mime_part->content_type =~ /^([^;]+)/;
	$mime_type = lc $mime_type;
	$mime_type = 'text/plain' if not $mime_type;
	my $part_name = $mime_part->filename;
	($part_name) = $mime_part->header('Content-ID') if not $part_name;
	my @filter_cmd = ();
	my @subparts = $mime_part->subparts;
	
	
	if($part_name)
	{
		push @{$attr_ref->{'attachment'}}, encode_utf8("$part_name $mime_type");
	}
	
	
	if($mime_type eq 'text/html')
	{
		my $html = $mime_part->body;
		# a good enough html parser
		$html =~ s{<(style|script)\b.*?(</(?1)\b.*?>)}{}gis;
		$html =~ s{</?(td|tr|th|form|br|hr|p)\b.*?>}{ }gi;
		$html =~ s{<img[^>]*\balt=([^'"`]\S*|.[^'"`]*).*?>}{ $1 }gi;
		$html =~ s{<table[^>]*\bsummary=([^'"`]\S*|.[^'"`]*).*?>}{ $1 }gi;
		$html =~ s{<.*?>}{}gs;
		$html = HTML::Entities::decode($html);
		$html =~ s/\s+/ /g;
		push @{$attr_ref->{'content'}}, $html;
	}
	elsif($mime_type =~ m{^text/} or $mime_type =~ m{^application/(ics|x-(sh))$})
	{
		push @{$attr_ref->{'content'}}, encode_utf8($mime_part->body);
	}
	elsif($mime_type ~~ @non_textual_types)
	{
		# nothing to index
	}
	elsif($mime_type =~ m{^application/(x-)?pdf$})
	{
		@filter_cmd = qw{pdftotext --strict-format - -};
	}
	elsif($mime_type eq 'application/rtf')
	{
		@filter_cmd = qw{unrtf --text /dev/stdin};
	}
	elsif($mime_type eq 'application/msword')
	{
		@filter_cmd = qw{catdoc -w -x};
	}
	elsif($mime_type eq 'application/vnd.ms-excel')
	{
		@filter_cmd = qw{xls2csv -x /dev/stdin};
	}
	elsif($mime_type eq 'application/vnd.ms-powerpoint')
	{
		@filter_cmd = qw{catppt /dev/stdin};
	}
#	elsif($mime_type =~ m{application/x-(7z-compressed|gzip|bzip|compressed|compressed-tar|tar)$})
#	{
#		@filter_cmd = qw{gunzip -c};  ... untar ... for file in tar ...
#	}
#	elsif($mime_type =~ m{application/(x-)?zip(-compressed)?$})
#	{
#		my $zip = Archive::Zip->new();
#		$zip->read();
#		for $zip->memberNames;
#		$fh = Archive::Zip::MemberRead->new($zip, $member);
#		$fh->getline;
#	}
	elsif($mime_type =~ m{^message/})
	{
		my $email = Email::MIME->new($mime_part->body);
		harvest_data($filepath, $email, $attr_ref);
	}
	else
	{
		if(not @subparts)
		{
			warn "$filepath: unsupported MIME attachment $mime_type\n";
		}
	}
	
	if(@filter_cmd)
	{
		my $pid = open2(my $filter_out, my $filter_in, @filter_cmd);
		print {$filter_in} $mime_part->body;
		close $filter_in;
		local $/ = undef;
		push @{$attr_ref->{'content'}}, <$filter_out>;
		
		waitpid( $pid, 0 );
		my $child_exit_status = $? >> 8;
		
		if($child_exit_status != 0)
		{
			warn "error $child_exit_status while running @filter_cmd\n";
		}
	}
	
	
	harvest_data($filepath, $_, $attr_ref) for @subparts;
}


for my $filepath (<STDIN>)
{
	chomp $filepath;
	my $rawmail;
	
	{
		open my $fh, '<', $filepath or die "$filepath: $!";
		local $/ = undef;
		$rawmail = <$fh>;
		close $fh;
	}
	my $email = Email::MIME->new($rawmail);
	
	my %attribute;
	harvest_data($filepath, $email, \%attribute);
	
	
	print "location $_\n" for split /\n/, $filepath;
	for my $attr (keys %attribute)
	{
		print "$attr $_\n" for split /\n/, join "\n", @{$attribute{$attr}};
	}
	print "end\n";
}
